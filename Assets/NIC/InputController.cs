//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/NIC/InputController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputController"",
    ""maps"": [
        {
            ""name"": ""AimController"",
            ""id"": ""299ca766-78dd-4aef-ab8c-86de6ea944dc"",
            ""actions"": [
                {
                    ""name"": ""AimPosition"",
                    ""type"": ""Value"",
                    ""id"": ""7ec24021-2897-4559-9cf3-d0ccfa6086d2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Aimimg"",
                    ""type"": ""Button"",
                    ""id"": ""ab0de5c2-1079-4431-bf48-39f7c389a5d4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fe24505d-4ac3-4393-b6a9-b7a0c82fbfd1"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AimPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""86fc1cfd-8c28-4338-9d6b-04205b489307"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AimPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3bed8c9f-228a-4a5f-8edb-519660050d54"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aimimg"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bd6f3b5b-47e0-4074-9e96-47348319c1ba"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aimimg"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ShootController"",
            ""id"": ""beb22e05-bb8a-4e01-89e8-653b325028c0"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""72d866c9-1ff8-4346-9c88-70a33b70ac6c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6d8543ef-6c82-40e0-99c6-bb6c06d2b2ac"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""91cf4a67-bebc-4401-8772-68714a6e710c"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // AimController
        m_AimController = asset.FindActionMap("AimController", throwIfNotFound: true);
        m_AimController_AimPosition = m_AimController.FindAction("AimPosition", throwIfNotFound: true);
        m_AimController_Aimimg = m_AimController.FindAction("Aimimg", throwIfNotFound: true);
        // ShootController
        m_ShootController = asset.FindActionMap("ShootController", throwIfNotFound: true);
        m_ShootController_Shoot = m_ShootController.FindAction("Shoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // AimController
    private readonly InputActionMap m_AimController;
    private List<IAimControllerActions> m_AimControllerActionsCallbackInterfaces = new List<IAimControllerActions>();
    private readonly InputAction m_AimController_AimPosition;
    private readonly InputAction m_AimController_Aimimg;
    public struct AimControllerActions
    {
        private @InputController m_Wrapper;
        public AimControllerActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @AimPosition => m_Wrapper.m_AimController_AimPosition;
        public InputAction @Aimimg => m_Wrapper.m_AimController_Aimimg;
        public InputActionMap Get() { return m_Wrapper.m_AimController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AimControllerActions set) { return set.Get(); }
        public void AddCallbacks(IAimControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_AimControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AimControllerActionsCallbackInterfaces.Add(instance);
            @AimPosition.started += instance.OnAimPosition;
            @AimPosition.performed += instance.OnAimPosition;
            @AimPosition.canceled += instance.OnAimPosition;
            @Aimimg.started += instance.OnAimimg;
            @Aimimg.performed += instance.OnAimimg;
            @Aimimg.canceled += instance.OnAimimg;
        }

        private void UnregisterCallbacks(IAimControllerActions instance)
        {
            @AimPosition.started -= instance.OnAimPosition;
            @AimPosition.performed -= instance.OnAimPosition;
            @AimPosition.canceled -= instance.OnAimPosition;
            @Aimimg.started -= instance.OnAimimg;
            @Aimimg.performed -= instance.OnAimimg;
            @Aimimg.canceled -= instance.OnAimimg;
        }

        public void RemoveCallbacks(IAimControllerActions instance)
        {
            if (m_Wrapper.m_AimControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAimControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_AimControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AimControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AimControllerActions @AimController => new AimControllerActions(this);

    // ShootController
    private readonly InputActionMap m_ShootController;
    private List<IShootControllerActions> m_ShootControllerActionsCallbackInterfaces = new List<IShootControllerActions>();
    private readonly InputAction m_ShootController_Shoot;
    public struct ShootControllerActions
    {
        private @InputController m_Wrapper;
        public ShootControllerActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shoot => m_Wrapper.m_ShootController_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_ShootController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShootControllerActions set) { return set.Get(); }
        public void AddCallbacks(IShootControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_ShootControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ShootControllerActionsCallbackInterfaces.Add(instance);
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
        }

        private void UnregisterCallbacks(IShootControllerActions instance)
        {
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
        }

        public void RemoveCallbacks(IShootControllerActions instance)
        {
            if (m_Wrapper.m_ShootControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IShootControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_ShootControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ShootControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ShootControllerActions @ShootController => new ShootControllerActions(this);
    public interface IAimControllerActions
    {
        void OnAimPosition(InputAction.CallbackContext context);
        void OnAimimg(InputAction.CallbackContext context);
    }
    public interface IShootControllerActions
    {
        void OnShoot(InputAction.CallbackContext context);
    }
}
